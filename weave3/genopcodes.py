import re

with open("Opcodes.h", "rt") as input_file:
	input_body = input_file.read()

opcodes = []

for match in re.finditer(r"(?m)((?:[CUS]?MSG|NUM)\w+)\s*=\s*(\w+)(?:,|$)", input_body):
	name = match.group(1)
	number = match.group(2)
	
	opcodes.append((name, number))

maxlen = max(len(opcode[0]) for opcode in opcodes)

with open("WeaveOpcodes.h", "wt") as weaveopcodes_h:
	weaveopcodes_h.write("""
#ifndef WEAVEOPCODES_H
#define WEAVEOPCODES_H
/* Please do not edit - this file is automatically generated from Mangos's
   Opcodes.h source file. */

namespace Weave {
	namespace Opcodes {
		typedef enum {
			%s
		} Opcode;
	
		typedef struct {
			const Opcode opcode;
			const char* name;
		} OpcodeInfo;
		
		static const unsigned int count = %d;
		extern const OpcodeInfo opcodes[count];
		const char* to_string(Opcode opcode);
		Opcode from_string(const char* string);
	}
}

#endif /* WEAVEOPCODES_H */
""" % (",\n\t\t\t".join("%s = %s" % (opcode[0].ljust(maxlen), opcode[1]) for opcode in opcodes), len(opcodes)))

with open("WeaveOpcodes.cpp", "wt") as weaveopcodes_cpp:
	weaveopcodes_cpp.write("""
#include "WeaveOpcodes.h"
#include <string.h>

/* Please do not edit - this file is automatically generated from Mangos's
   Opcodes.h source file. */

namespace Weave {
	namespace Opcodes {
		extern const OpcodeInfo opcodes[] = {
			%s
		};
		
		const char* to_string(Opcode opcode)
		{
			unsigned int opcode_index;
			for(opcode_index = 0; opcode_index < count; opcode_index++)
			{
				if(opcodes[opcode_index].opcode == opcode)
					return opcodes[opcode_index].name;
			}
			
			return (char*)0;
		}
		
		Opcode from_string(const char* string)
		{
			unsigned int opcode_index;
			for(opcode_index = 0; opcode_index < count; opcode_index++)
			{
				if(!strcmp(opcodes[opcode_index].name, string))
					return opcodes[opcode_index].opcode;
			}
			
			return (Opcode)-1;
		}
	}
}
""" % ",\n\t\t\t".join("""{ /* %s */ %s "%s" }""" % ((opcode[1], (opcode[0]+",").ljust(maxlen+1), opcode[0])) for opcode in opcodes))